
ÁE¹Etype Account @entity {
	id: ID!
	asERC20: ERC20Contract
	ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
	ERC20approvalsOwner: [ERC20Approval!]! @derivedFrom(field: "owner")
	ERC20approvalsSpender: [ERC20Approval!]! @derivedFrom(field: "spender")
	ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
	ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")
	asAccessControl: AccessControl
	membership: [AccessControlRoleMember!]! @derivedFrom(field: "account")
	roleGranted: [RoleGranted!]! @derivedFrom(field: "account")
	roleGrantedSender: [RoleGranted!]! @derivedFrom(field: "sender")
	roleRevoked: [RoleRevoked!]! @derivedFrom(field: "account")
	roleRevokedSender: [RoleRevoked!]! @derivedFrom(field: "sender")
	asERC721: ERC721Contract
	ERC721tokens: [ERC721Token!]! @derivedFrom(field: "owner")
	ERC721operatorOwner: [ERC721Operator!]! @derivedFrom(field: "owner")
	ERC721operatorOperator: [ERC721Operator!]! @derivedFrom(field: "operator")
	ERC721transferFromEvent: [ERC721Transfer!]! @derivedFrom(field: "from")
	ERC721transferToEvent: [ERC721Transfer!]! @derivedFrom(field: "to")
	asOwnable: Ownable
	ownerOf: [Ownable!]! @derivedFrom(field: "owner")
	ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "owner")
	asERC1155: ERC1155Contract
	ERC1155balances: [ERC1155Balance!]! @derivedFrom(field: "account")
	ERC1155operatorOwner: [ERC1155Operator!]! @derivedFrom(field: "owner")
	ERC1155operatorOperator: [ERC1155Operator!]! @derivedFrom(field: "operator")
	ERC1155transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "from")
	ERC1155transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "to")
	ERC1155transferOperatorEvent: [ERC1155Transfer!]! @derivedFrom(field: "operator")
	asTimelock: Timelock
	timelockedCalls: [TimelockCall!]! @derivedFrom(field: "target")
	events: [Event!]! @derivedFrom(field: "emitter")
}
type ERC20Contract @entity {
	id: ID!
	asAccount: Account!
	name: String
	symbol: String
	decimals: Int!
	totalSupply: ERC20Balance!
	balances: [ERC20Balance!]! @derivedFrom(field: "contract")
	approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
	transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
}
type ERC20Balance @entity {
	id: ID!
	contract: ERC20Contract!
	account: Account
	value: BigDecimal!
	valueExact: BigInt!
	transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "fromBalance")
	transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "toBalance")
}
type ERC20Approval @entity {
	id: ID!
	contract: ERC20Contract!
	owner: Account!
	spender: Account!
	value: BigDecimal!
	valueExact: BigInt!
}
type ERC20Transfer implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC20Contract!
	from: Account
	fromBalance: ERC20Balance
	to: Account
	toBalance: ERC20Balance
	value: BigDecimal!
	valueExact: BigInt!
}
type AccessControl @entity {
	id: ID!
	asAccount: Account!
	roles: [AccessControlRole!]! @derivedFrom(field: "contract")
}
type Role @entity {
	id: ID!
	roleOf: [AccessControlRole!]! @derivedFrom(field: "role")
}
type AccessControlRole @entity {
	id: ID!
	contract: AccessControl!
	role: Role!
	admin: AccessControlRole!
	adminOf: [AccessControlRole!]! @derivedFrom(field: "admin")
	members: [AccessControlRoleMember!]! @derivedFrom(field: "accesscontrolrole")
	roleGranted: [RoleGranted!]! @derivedFrom(field: "role")
	roleRevoked: [RoleRevoked!]! @derivedFrom(field: "role")
	roleAdminChanged: [RoleAdminChanged!]! @derivedFrom(field: "role")
}
type AccessControlRoleMember @entity {
	id: ID!
	accesscontrolrole: AccessControlRole!
	account: Account!
}
type RoleAdminChanged implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	newAdminRole: AccessControlRole!
	previousAdminRole: AccessControlRole!
}
type RoleGranted implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	account: Account!
	sender: Account!
}
type RoleRevoked implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	account: Account!
	sender: Account!
}
type ERC721Contract @entity {
	id: ID!
	asAccount: Account!
	supportsMetadata: Boolean
	name: String
	symbol: String
	tokens: [ERC721Token!]! @derivedFrom(field: "contract")
	operators: [ERC721Operator!]! @derivedFrom(field: "contract")
	transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
}
type ERC721Token @entity {
	id: ID!
	contract: ERC721Contract!
	identifier: BigInt!
	owner: Account!
	approval: Account!
	uri: String
	transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
}
type ERC721Operator @entity {
	id: ID!
	contract: ERC721Contract!
	owner: Account!
	operator: Account!
	approved: Boolean!
}
type ERC721Transfer implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC721Contract!
	token: ERC721Token!
	from: Account!
	to: Account!
}
type Ownable @entity {
	id: ID!
	asAccount: Account!
	owner: Account!
	ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "contract")
}
type OwnershipTransferred implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Ownable!
	owner: Account!
}
type ERC1155Contract @entity {
	id: ID!
	asAccount: Account!
	tokens: [ERC1155Token!]! @derivedFrom(field: "contract")
	balances: [ERC1155Balance!]! @derivedFrom(field: "contract")
	operators: [ERC1155Operator!]! @derivedFrom(field: "contract")
	transfers: [ERC1155Transfer!]! @derivedFrom(field: "contract")
}
type ERC1155Token @entity {
	id: ID!
	contract: ERC1155Contract!
	identifier: BigInt!
	uri: String
	totalSupply: ERC1155Balance!
	balances: [ERC1155Balance!]! @derivedFrom(field: "token")
	transfers: [ERC1155Transfer!]! @derivedFrom(field: "token")
}
type ERC1155Balance @entity {
	id: ID!
	contract: ERC1155Contract!
	token: ERC1155Token!
	account: Account
	value: BigDecimal!
	valueExact: BigInt!
	transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "fromBalance")
	transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "toBalance")
}
type ERC1155Operator @entity {
	id: ID!
	contract: ERC1155Contract!
	owner: Account!
	operator: Account!
	approved: Boolean!
}
type ERC1155Transfer implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC1155Contract!
	token: ERC1155Token!
	operator: Account!
	from: Account
	fromBalance: ERC1155Balance
	to: Account
	toBalance: ERC1155Balance
	value: BigDecimal!
	valueExact: BigInt!
}
type Timelock @entity {
	id: ID!
	asAccount: Account!
	operations: [TimelockOperation!]! @derivedFrom(field: "contract")
	scheduled: [TimelockOperationScheduled!]! @derivedFrom(field: "contract")
	executed: [TimelockOperationExecuted!]! @derivedFrom(field: "contract")
	cancelled: [TimelockOperationCancelled!]! @derivedFrom(field: "contract")
	mindelaychange: [TimelockMinDelayChange!]! @derivedFrom(field: "contract")
}
enum TimelockStatus {
	SCHEDULED
	EXECUTED
	CANCELED
}
type TimelockOperation @entity {
	id: ID!
	contract: Timelock!
	status: TimelockStatus!
	delay: BigInt!
	timestamp: BigInt!
	predecessor: TimelockOperation
	calls: [TimelockCall!]! @derivedFrom(field: "operation")
	scheduled: [TimelockOperationScheduled!]! @derivedFrom(field: "operation")
	executed: [TimelockOperationExecuted!]! @derivedFrom(field: "operation")
	cancelled: [TimelockOperationCancelled!]! @derivedFrom(field: "operation")
}
type TimelockCall @entity {
	id: ID!
	operation: TimelockOperation!
	index: BigInt!
	target: Account!
	value: BigDecimal!
	data: Bytes!
	scheduled: [TimelockOperationScheduled!]! @derivedFrom(field: "call")
	executed: [TimelockOperationExecuted!]! @derivedFrom(field: "call")
}
type TimelockOperationScheduled implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Timelock!
	operation: TimelockOperation!
	call: TimelockCall!
}
type TimelockOperationExecuted implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Timelock!
	operation: TimelockOperation!
	call: TimelockCall!
}
type TimelockOperationCancelled implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Timelock!
	operation: TimelockOperation!
}
type TimelockMinDelayChange implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Timelock!
	delay: BigInt!
}
interface Event {
	id: ID!
	transaction: Transaction!
	emitter: Account!
	timestamp: BigInt!
}
type Transaction @entity {
	id: ID!
	timestamp: BigInt!
	blockNumber: BigInt!
	events: [Event!]! @derivedFrom(field: "transaction")
}
¹E